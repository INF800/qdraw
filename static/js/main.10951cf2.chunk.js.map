{"version":3,"sources":["sketch/SketchPad.js","ui/UndoButton.js","ui/Info.js","speech.js","api.js","App.js","serviceWorker.js","index.js"],"names":["SketchPad","canvasRef","contextRef","setCurB64","useState","isDrawing","setIsDrawing","useEffect","canvas","current","width","height","style","context","getContext","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","preventDefault","offsetX","offsetY","beginPath","moveTo","finishDrawing","closePath","toDataURL","draw","undefined","rect","target","getBoundingClientRect","x","targetTouches","pageX","left","y","pageY","top","lineTo","stroke","className","onMouseDown","onMouseUp","onMouseMove","onTouchStart","onTouchEnd","onTouchMove","ref","UndoButton","onClick","clearRect","window","innerWidth","innerHeight","Info","doodle","time","timeFieldRef","Speech","say","a","console","log","utterance","SpeechSynthesisUtterance","replace","speechSynthesis","speak","base","isBackendUp","setisBackendUp","axios","get","response","data","status","predictB64","curB64","post","preds","resetDoodle","curDoodle","setTime","runningTimerRef","i","length","label","clearInterval","timeleft","setInterval","textContent","App","useRef","setisBackendUpFromAPI","cancel","run","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.10951cf2.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nfunction SketchPad({canvasRef, contextRef, setCurB64}) {\n\n  const [isDrawing, setIsDrawing] = useState(false)\n  \n  useEffect(() => {\n    const canvas = canvasRef.current;\n    // canvas.width = window.innerWidth;\n    // canvas.height = window.innerHeight;\n    // canvas.style.width = `${window.innerWidth}px`;\n    // canvas.style.height = `${window.innerHeight}px`;\n    canvas.width = 350;\n    canvas.height = 350;\n    canvas.style.width = `${350}px`;\n    canvas.style.height = `${350}px`;\n\n    const context = canvas.getContext(\"2d\")\n    //context.scale(2,2)\n    //context.fillStyle = \"rgb(255,255,255)\";\n    //context.fillRect(0,0,window.innerWidth, window.innerHeight);\n    context.lineCap = \"round\"\n    context.strokeStyle = \"rgb(1,1,1)\"\n    context.lineWidth = 5\n    contextRef.current = context;\n  }, [canvasRef, contextRef])\n\n  const startDrawing = ({nativeEvent}) => {\n    nativeEvent.preventDefault()\n    const {offsetX, offsetY} = nativeEvent;\n    contextRef.current.beginPath()\n    contextRef.current.moveTo(offsetX, offsetY)\n    setIsDrawing(true)\n  }\n\n  const finishDrawing = ({nativeEvent}) => {\n    nativeEvent.preventDefault()\n    contextRef.current.closePath()\n    setIsDrawing(false)\n    // update cur image on screen\n    setCurB64(canvasRef.current.toDataURL(\"image/jpeg\"))\n  }\n\n  const draw = ({nativeEvent}) => {\n    nativeEvent.preventDefault()\n    if(!isDrawing){\n      return\n    }\n    const {offsetX, offsetY} = nativeEvent;\n    // for touch screen\n    if (offsetX === undefined){\n      var rect = nativeEvent.target.getBoundingClientRect();\n      var x = nativeEvent.targetTouches[0].pageX - rect.left;\n      var y = nativeEvent.targetTouches[0].pageY - rect.top;\n      contextRef.current.lineTo(x, y)\n      contextRef.current.stroke()\n      return\n    }\n\n    contextRef.current.lineTo(offsetX, offsetY)\n    contextRef.current.stroke()\n  }\n  \n  return (\n    <div className=\"CanvasContainer\">\n      <canvas\n          className=\"canvas\"\n          \n          onMouseDown={startDrawing}\n          onMouseUp={finishDrawing}\n          onMouseMove={draw}\n          \n          onTouchStart={startDrawing}\n          onTouchEnd={finishDrawing}\n          onTouchMove={draw}\n          \n          ref={canvasRef}\n      />\n    </div>\n  )\n}\n\nexport default SketchPad;","import React from 'react';\nimport './UndoButton.css'\n\nfunction UndoButton({contextRef}) {\n\n  function retBottomPos(){\n    if (window.innerHeight > window.innerWidth){\n      return \"100vh\"\n    } else {\n      return \"20vh\"\n    }\n  }\n\n  const next = () => {\n    // todo\n  }\n\n  const undo = () => {\n    contextRef.current.clearRect(0, 0, window.innerWidth, window.innerHeight);\n    //contextRef.current.fillStyle = \"rgb(255,255,255)\";\n    //contextRef.current.fillRect(0,0,window.innerWidth, window.innerHeight);\n  }\n\n  return (\n    <div className=\"ButtonsContainer\">\n        \n      <button \n        onClick={next}\n        className=\"button white\"\n      >\n        skip\n      </button>\n      &nbsp;  &nbsp;  \n      <button\n        onClick={undo} \n        className=\"button red\"\n      >\n        Clear\n      </button>\n    </div>\n    \n  )\n}\n\n\nexport default UndoButton;\n","import React from 'react';\nimport './Info.css'\n\nfunction Info({doodle, time, timeFieldRef}) {\n\n  return (\n    <div className=\"InfoWeb\">\n      <div className=\"InfoWebHead\">\n        Please draw <b>{doodle}</b> <br/>\n        in <b><span ref={timeFieldRef} className=\"letter-changer\">{time}</span></b> seconds\n      </div>\n    </div>\n  )\n}\n\n\nexport default Info;\n","var talking = true\n\nasync function Speech(say) {\n    if ('speechSynthesis' in window && talking) {\n        console.log('speakig:', say)\n        var utterance = new SpeechSynthesisUtterance(say.replace( /(<([^>]+)>)/ig, ''));\n        //msg.voice = voices[10]; // Note: some voices don't support altering params\n        //msg.voiceURI = 'native';\n        //utterance.volume = 1; // 0 to 1\n        //utterance.rate = 0.1; // 0.1 to 10\n        //utterance.pitch = 1; //0 to 2\n        //utterance.text = 'Hello World';\n        //utterance.lang = 'en-UK';\n        speechSynthesis.speak(utterance);\n    }\n}\n\nexport {Speech}","import axios from 'axios'\nimport {Speech} from './speech'\n//===================================\nconst base = \"http://127.0.0.1:\"\nconst port = \"8008/\"\n//===================================\n\nasync function setisBackendUpFromAPI(isBackendUp, setisBackendUp){\n    if (isBackendUp) { return }\n    const response = await axios.get(base + port + \"wakeup\")\n    console.log('w', response.data)\n    if (response.data.status === \"up\"){\n        setisBackendUp(true)\n    }\n}\n\nconst predictB64 = async (curB64) => {\n    if (curB64 === null) {return}\n    const response = await axios.post(base + port + \"predict\", {\n        \"b64Image\": curB64\n    })\n    return response.data.preds\n}\n\nconst resetDoodle = (preds, curDoodle, setTime, timeFieldRef, runningTimerRef) => {\n    if (preds===undefined) {return} \n    console.log(preds)\n\n    for (let i=0; i<preds.length; i++){\n        const [label, score] = preds[i]\n        \n        Speech(\"I see \" + label)\n\n        if (curDoodle === label) {\n            // reset time, doodlename to new\n            // -------------------------------\n            // todo: doodle name\n            if (runningTimerRef.current !== null){\n                clearInterval(runningTimerRef.current);\n            }\n            clearInterval(runningTimerRef.current);\n            var timeleft = 10\n            runningTimerRef.current = setInterval(function(){\n                timeleft--;\n                timeFieldRef.current.textContent = timeleft;\n                if(timeleft <= 0)\n                    clearInterval(runningTimerRef.current);\n            },1000);\n            //setTime(\"10\") // should be @end\n            // --------------------------------\n            return true\n        }\n    }\n    return false\n}\n\nexport {setisBackendUpFromAPI, predictB64, resetDoodle}","import React, {useRef, useState, useEffect} from 'react';\nimport './App.css';\nimport SketchPad from './sketch/SketchPad'\nimport UndoButton from './ui/UndoButton'\nimport Info from './ui/Info'\nimport {Speech} from './speech'\nimport {setisBackendUpFromAPI, predictB64, resetDoodle} from './api'\n\nfunction App() {\n\n  const canvasRef = useRef(null)\n  const contextRef = useRef(null)\n  const timeFieldRef = useRef(null)\n  const runningTimerRef = useRef(null)\n\n  const [isBackendUp, setisBackendUp] = useState(false)\n  const [curB64, setCurB64] = useState(null)\n  const [curDoodle, setDoodle] = useState('animal migration')\n  const [time, setTime] = useState('10')\n\n  useEffect( ()=>{\n    setisBackendUpFromAPI(isBackendUp, setisBackendUp)\n    const run = async () => {\n      speechSynthesis.cancel() // clear queue due to async/await\n      var preds = await predictB64(curB64)\n      const doodleStatus = resetDoodle(preds, curDoodle, setTime, timeFieldRef, runningTimerRef)\n    }\n    run()\n  }, [isBackendUp, curB64, curDoodle, time, timeFieldRef, runningTimerRef])\n\n  if (isBackendUp !== true){\n    return (\n      <div  className='BigInfo'>\n        Waking up server &nbsp;😴 &nbsp;  \n        <span className=\"letter-changer\">ZzZ</span>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <SketchPad \n        canvasRef={canvasRef}\n        contextRef={contextRef}\n        setCurB64={setCurB64}\n      />\n      <UndoButton\n        contextRef={contextRef}\n      />\n      <Info\n        doodle={curDoodle}\n        time={time}\n        timeFieldRef={timeFieldRef}\n      />\n    </div>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}