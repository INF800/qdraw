{"version":3,"sources":["sketch/SketchPad.js","ui/UndoButton.js","ui/Info.js","App.js","serviceWorker.js","index.js"],"names":["SketchPad","canvasRef","contextRef","useState","isDrawing","setIsDrawing","useEffect","canvas","current","width","window","innerWidth","height","innerHeight","style","context","getContext","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","preventDefault","offsetX","offsetY","beginPath","moveTo","finishDrawing","closePath","draw","undefined","rect","target","getBoundingClientRect","x","targetTouches","pageX","left","y","pageY","top","lineTo","stroke","className","onMouseDown","onMouseUp","onMouseMove","onTouchStart","onTouchEnd","onTouchMove","ref","UndoButton","onClick","clearRect","Info","doodle","time","App","useRef","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QA0EeA,MAxEf,YAA6C,IAAzBC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,WAAa,EAERC,oBAAS,GAFD,mBAEnCC,EAFmC,KAExBC,EAFwB,KAI1CC,qBAAU,WACR,IAAMC,EAASN,EAAUO,QACzBD,EAAOE,MAAQC,OAAOC,WACtBJ,EAAOK,OAASF,OAAOG,YACvBN,EAAOO,MAAML,MAAb,UAAwBC,OAAOC,WAA/B,MACAJ,EAAOO,MAAMF,OAAb,UAAyBF,OAAOG,YAAhC,MAEA,IAAME,EAAUR,EAAOS,WAAW,MAElCD,EAAQE,QAAU,QAClBF,EAAQG,YAAc,QACtBH,EAAQI,UAAY,EACpBjB,EAAWM,QAAUO,IACpB,IAEH,IAAMK,EAAe,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YACrBA,EAAYC,iBAD0B,IAE/BC,EAAoBF,EAApBE,QAASC,EAAWH,EAAXG,QAChBtB,EAAWM,QAAQiB,YACnBvB,EAAWM,QAAQkB,OAAOH,EAASC,GACnCnB,GAAa,IAGTsB,EAAgB,SAAC,GAAkB,EAAjBN,YACVC,iBACZpB,EAAWM,QAAQoB,YACnBvB,GAAa,IAGTwB,EAAO,SAAC,GAAmB,IAAlBR,EAAiB,EAAjBA,YAEb,GADAA,EAAYC,iBACRlB,EAAJ,CAF8B,IAKvBmB,EAAoBF,EAApBE,QAASC,EAAWH,EAAXG,QAEhB,QAAgBM,IAAZP,EAAsB,CACxB,IAAIQ,EAAOV,EAAYW,OAAOC,wBAC1BC,EAAIb,EAAYc,cAAc,GAAGC,MAAQL,EAAKM,KAC9CC,EAAIjB,EAAYc,cAAc,GAAGI,MAAQR,EAAKS,IAGlD,OAFAtC,EAAWM,QAAQiC,OAAOP,EAAGI,QAC7BpC,EAAWM,QAAQkC,SAIrBxC,EAAWM,QAAQiC,OAAOlB,EAASC,GACnCtB,EAAWM,QAAQkC,WAGrB,OACE,6BACE,4BACIC,UAAU,SAEVC,YAAaxB,EACbyB,UAAWlB,EACXmB,YAAajB,EAEbkB,aAAc3B,EACd4B,WAAYrB,EACZsB,YAAapB,EAEbqB,IAAKjD,M,MCjDAkD,MAhBf,YAAmC,IAAdjD,EAAa,EAAbA,WAMnB,OACE,yBACEkD,QANS,WACXlD,EAAWM,QAAQ6C,UAAU,EAAG,EAAG3C,OAAOC,WAAYD,OAAOG,cAM3D8B,UAAU,iBAFZ,S,MCIWW,MAXf,YAA+B,IAAhBC,EAAe,EAAfA,OAAQC,EAAO,EAAPA,KAErB,OACE,yBAAKb,UAAU,WAAf,eACc,2BAAIY,GADlB,IAC8B,6BAD9B,MAEK,2BAAIC,GAFT,aCyBWC,MAzBf,WAEE,IAAMxD,EAAYyD,iBAAO,MACnBxD,EAAawD,iBAAO,MAHb,EAIkBvD,mBAAS,OAJ3B,mBAINoD,EAJM,aAKcpD,mBAAS,OALvB,mBAKNqD,EALM,KAOb,OAPa,KAQX,6BACE,kBAAC,EAAD,CACEvD,UAAWA,EACXC,WAAYA,IAEd,kBAAC,EAAD,CACEA,WAAYA,IAEd,kBAAC,EAAD,CACEqD,OAAQA,EACRC,KAAMA,MCZMG,QACW,cAA7BjD,OAAOkD,SAASC,UAEe,UAA7BnD,OAAOkD,SAASC,UAEhBnD,OAAOkD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2ce3b7b3.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nfunction SketchPad({canvasRef, contextRef}) {\n\n  const [isDrawing, setIsDrawing] = useState(false)\n  \n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    canvas.style.width = `${window.innerWidth}px`;\n    canvas.style.height = `${window.innerHeight}px`;\n    \n    const context = canvas.getContext(\"2d\")\n    // context.scale(2,2)\n    context.lineCap = \"round\"\n    context.strokeStyle = \"black\"\n    context.lineWidth = 5\n    contextRef.current = context;\n  }, [])\n\n  const startDrawing = ({nativeEvent}) => {\n    nativeEvent.preventDefault()\n    const {offsetX, offsetY} = nativeEvent;\n    contextRef.current.beginPath()\n    contextRef.current.moveTo(offsetX, offsetY)\n    setIsDrawing(true)\n  }\n\n  const finishDrawing = ({nativeEvent}) => {\n    nativeEvent.preventDefault()\n    contextRef.current.closePath()\n    setIsDrawing(false)\n  }\n\n  const draw = ({nativeEvent}) => {\n    nativeEvent.preventDefault()\n    if(!isDrawing){\n      return\n    }\n    const {offsetX, offsetY} = nativeEvent;\n    // for touch screen\n    if (offsetX === undefined){\n      var rect = nativeEvent.target.getBoundingClientRect();\n      var x = nativeEvent.targetTouches[0].pageX - rect.left;\n      var y = nativeEvent.targetTouches[0].pageY - rect.top;\n      contextRef.current.lineTo(x, y)\n      contextRef.current.stroke()\n      return\n    }\n\n    contextRef.current.lineTo(offsetX, offsetY)\n    contextRef.current.stroke()\n  }\n  \n  return (\n    <div>\n      <canvas\n          className=\"canvas\"\n          \n          onMouseDown={startDrawing}\n          onMouseUp={finishDrawing}\n          onMouseMove={draw}\n          \n          onTouchStart={startDrawing}\n          onTouchEnd={finishDrawing}\n          onTouchMove={draw}\n          \n          ref={canvasRef}\n      />\n    </div>\n  )\n}\n\nexport default SketchPad;","import React from 'react';\nimport './UndoButton.css'\n\nfunction UndoButton({contextRef}) {\n\n  const undo = () => {\n    contextRef.current.clearRect(0, 0, window.innerWidth, window.innerHeight);\n  }\n\n  return (\n    <div\n      onClick={undo} \n      className=\"UndoButtonWeb\">\n        Undo\n    </div>\n  )\n}\n\n\nexport default UndoButton;\n","import React from 'react';\nimport './Info.css'\n\nfunction Info({doodle, time}) {\n\n  return (\n    <div className=\"InfoWeb\">\n      Please draw <b>{doodle}</b> <br/>\n      in <b>{time}</b> seconds\n    </div>\n  )\n}\n\n\nexport default Info;\n","import React, {useRef, useState} from 'react';\nimport './App.css';\nimport SketchPad from './sketch/SketchPad'\nimport UndoButton from './ui/UndoButton'\nimport Info from './ui/Info'\n\nfunction App() {\n\n  const canvasRef = useRef(null)\n  const contextRef = useRef(null)\n  const [doodle, updateDoodle] = useState('xxx')\n  const [time, updateTime] = useState('yy')\n\n  return (\n    <div>\n      <SketchPad \n        canvasRef={canvasRef}\n        contextRef={contextRef}\n      />\n      <UndoButton\n        contextRef={contextRef}\n      />\n      <Info\n        doodle={doodle}\n        time={time}\n      />\n    </div>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}